// Generated by CoffeeScript 1.12.1
(function() {
  var CHARS, PngFont, app, canvasBuffer, dialog, exports, fs;

  app = require('electron').remote;

  fs = require('fs');

  canvasBuffer = require('electron-canvas-to-buffer');

  dialog = app.dialog;

  exports = this;

  CHARS = "abcdefghijklmnopqrstuvwxyz";

  CHARS += CHARS.toUpperCase();

  CHARS += ".,<>/?";

  PngFont = (function() {
    var renderedFont;

    PngFont.prototype.renderX = 0;

    PngFont.prototype.renderY = 0;

    PngFont.prototype.fontSize = 18;

    PngFont.prototype.font = "monospace";

    PngFont.prototype.fontColor = "black";

    renderedFont = null;

    function PngFont() {
      this.canvasNode = document.createElement("CANVAS");
      this.canvasNode.width = $("#main").width();
      this.canvasNode.height = 300;
      this.canvasNode.style.border = "1px solid";
      $("#canvas-place").append(this.canvasNode);
      this.canvas = this.canvasNode.getContext("2d");
      this.BindUIEvents();
    }

    PngFont.prototype.RenderFont = function() {
      var char, chars, i, index, len;
      if (this.renderedFont != null) {
        $(this.renderedFont).remove();
        this.renderedFont = null;
      }
      this.fontAtlas = {
        "torch-texture-atlas": true,
        textures: []
      };
      this.canvas.clearRect(0, 0, this.renderX, 400);
      this.renderX = 0;
      chars = CHARS.split("");
      for (index = i = 0, len = chars.length; i < len; index = ++i) {
        char = chars[index];
        this.RenderCharacter(char);
      }
      return this.ClipFontImage();
    };

    PngFont.prototype.RenderCharacter = function(char) {
      this.canvas.fillStyle = this.fontColor;
      this.canvas.font = this.fontSize + "px " + this.font;
      this.canvas.fillText(char, this.renderX, this.fontSize);
      this.fontAtlas.textures.push({
        name: char,
        clipX: this.renderX,
        clipY: this.renderY
      });
      return this.renderX += this.canvas.measureText(char).width;
    };

    PngFont.prototype.ClipFontImage = function() {
      var canvas, clipHeight, imageData, newCanvas;
      clipHeight = this.fontSize * 1.5;
      imageData = this.canvas.getImageData(0, 0, this.renderX, clipHeight);
      newCanvas = document.createElement("CANVAS");
      newCanvas.width = this.renderX;
      newCanvas.height = clipHeight;
      newCanvas.style.border = "1px solid green";
      $("#rendered-font").append(newCanvas);
      canvas = newCanvas.getContext("2d");
      canvas.putImageData(imageData, 0, 0);
      return this.renderedFont = newCanvas;
    };

    PngFont.prototype.BindUIEvents = function() {
      var fontName, saveFont;
      fontName = $("#font-name");
      saveFont = $("#save-font");
      fontName.change((function(_this) {
        return function() {
          _this.font = fontName.val();
          return _this.RenderFont();
        };
      })(this));
      return saveFont.click((function(_this) {
        return function() {
          return _this.SaveFile();
        };
      })(this));
    };

    PngFont.prototype.SaveFile = function() {
      return dialog.showSaveDialog((function(_this) {
        return function(fileName) {
          var buffer;
          if (fileName == null) {
            return alert("no file selected");
          } else {
            buffer = canvasBuffer(_this.renderedFont, "image/png");
            fs.writeFile(fileName, buffer, function(err) {
              if (err != null) {
                return alert("An error occured! " + err.message);
              } else {
                return alert("File Saved");
              }
            });
            return fs.writeFile(fileName + ".json", JSON.stringify(_this.fontAtlas, null, 4), function(err) {
              if (err != null) {
                return alert("An error occured! " + err.message);
              }
            });
          }
        };
      })(this));
    };

    PngFont.prototype.OpenFont = function() {
      return dialog.showOpenDialog((function(_this) {
        return function(fileNames) {
          if (fileNames != null) {

          } else {
            return alert("No File selected");
          }
        };
      })(this));
    };

    return PngFont;

  })();

  $(document).ready(function() {
    var pngFont;
    pngFont = exports.pngFont = new PngFont();
    return pngFont.RenderFont();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG5nRm9udC5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiU3JjXFxwbmdGb250LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQSxNQUFBOztFQUFBLEdBQUEsR0FBTSxPQUFBLENBQVEsVUFBUixDQUFtQixDQUFDOztFQUMxQixFQUFBLEdBQUssT0FBQSxDQUFRLElBQVI7O0VBQ0wsWUFBQSxHQUFlLE9BQUEsQ0FBUSwyQkFBUjs7RUFDZixNQUFBLEdBQVMsR0FBRyxDQUFDOztFQUViLE9BQUEsR0FBVTs7RUFFVixLQUFBLEdBQVE7O0VBQ1IsS0FBQSxJQUFTLEtBQUssQ0FBQyxXQUFOLENBQUE7O0VBQ1QsS0FBQSxJQUFTOztFQUVIO0FBQ0YsUUFBQTs7c0JBQUEsT0FBQSxHQUFTOztzQkFDVCxPQUFBLEdBQVM7O3NCQUNULFFBQUEsR0FBVTs7c0JBQ1YsSUFBQSxHQUFNOztzQkFDTixTQUFBLEdBQVc7O0lBQ1gsWUFBQSxHQUFlOztJQUVGLGlCQUFBO01BQ1QsSUFBQyxDQUFBLFVBQUQsR0FBYyxRQUFRLENBQUMsYUFBVCxDQUF1QixRQUF2QjtNQUNkLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBWixHQUFvQixDQUFBLENBQUUsT0FBRixDQUFVLENBQUMsS0FBWCxDQUFBO01BQ3BCLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFBWixHQUFxQjtNQUNyQixJQUFDLENBQUEsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFsQixHQUEyQjtNQUUzQixDQUFBLENBQUUsZUFBRixDQUFrQixDQUFDLE1BQW5CLENBQTBCLElBQUMsQ0FBQSxVQUEzQjtNQUVBLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBQyxDQUFBLFVBQVUsQ0FBQyxVQUFaLENBQXVCLElBQXZCO01BRVYsSUFBQyxDQUFBLFlBQUQsQ0FBQTtJQVZTOztzQkFZYixVQUFBLEdBQVksU0FBQTtBQUNSLFVBQUE7TUFBQSxJQUFHLHlCQUFIO1FBQ0ksQ0FBQSxDQUFFLElBQUMsQ0FB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aXJlKCdmcycpXHJcbmNhbnZhc0J1ZmZlciA9IHJlcXVpcmUoJ2VsZWN0cm9uLWNhbnZhcy10by1idWZmZXInKVxyXG5kaWFsb2cgPSBhcHAuZGlhbG9nXHJcblxyXG5leHBvcnRzID0gdGhpc1xyXG5cclxuQ0hBUlMgPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCJcclxuQ0hBUlMgKz0gQ0hBUlMudG9VcHBlckNhc2UoKVxyXG5DSEFSUyArPSBcIi4sPD4vP1wiXHJcblxyXG5jbGFzcyBQbmdGb250XHJcbiAgICByZW5kZXJYOiAwXHJcbiAgICByZW5kZXJZOiAwXHJcbiAgICBmb250U2l6ZTogMThcclxuICAgIGZvbnQ6IFwibW9ub3NwYWNlXCJcclxuICAgIGZvbnRDb2xvcjogXCJibGFja1wiXHJcbiAgICByZW5kZXJlZEZvbnQgPSBudWxsXHJcblxyXG4gICAgY29uc3RydWN0b3I6IC0+XHJcbiAgICAgICAgQGNhbnZhc05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiQ0FOVkFTXCIpXHJcbiAgICAgICAgQGNhbnZhc05vZGUud2lkdGggPSAkKFwiI21haW5cIikud2lkdGgoKVxyXG4gICAgICAgIEBjYW52YXNOb2RlLmhlaWdodCA9IDMwMFxyXG4gICAgICAgIEBjYW52YXNOb2RlLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkXCJcclxuXHJcbiAgICAgICAgJChcIiNjYW52YXMtcGxhY2VcIikuYXBwZW5kKEBjYW52YXNOb2RlKVxyXG5cclxuICAgICAgICBAY2FudmFzID0gQGNhbnZhc05vZGUuZ2V0Q29udGV4dChcIjJkXCIpXHJcblxyXG4gICAgICAgIEBCaW5kVUlFdmVudHMoKVxyXG5cclxuICAgIFJlbmRlckZvbnQ6IC0+XHJcbiAgICAgICAgaWYgQHJlbmRlcmVkRm9udD9cclxuICAgICAgICAgICAgJChAcmVuZGVyZWRGb250KS5yZW1vdmUoKVxyXG4gICAgICAgICAgICBAcmVuZGVyZWRGb250ID0gbnVsbFxyXG5cclxuICAgICAgICBAZm9udEF0bGFzID1cclxuICAgICAgICAgICAgXCJ0b3JjaC10ZXh0dXJlLWF0bGFzXCI6IHRydWVcclxuICAgICAgICAgICAgdGV4dHVyZXM6IFtdXHJcblxyXG4gICAgICAgIEBjYW52YXMuY2xlYXJSZWN0KDAsIDAsIEByZW5kZXJYLCA0MDApXHJcbiAgICAgICAgQHJlbmRlclggPSAwXHJcblxyXG5cclxuICAgICAgICBjaGFycyA9IENIQVJTLnNwbGl0KFwiXCIpXHJcblxyXG4gICAgICAgIGZvciBjaGFyLGluZGV4IGluIGNoYXJzXHJcbiAgICAgICAgICAgIEBSZW5kZXJDaGFyYWN0ZXIoY2hhcilcclxuXHJcbiAgICAgICAgQENsaXBGb250SW1hZ2UoKVxyXG5cclxuICAgIFJlbmRlckNoYXJhY3RlcjogKGNoYXIpIC0+XHJcbiAgICAgICAgQGNhbnZhcy5maWxsU3R5bGUgPSBAZm9udENvbG9yXHJcbiAgICAgICAgQGNhbnZhcy5mb250ID0gXCIje0Bmb250U2l6ZX1weCAje0Bmb250fVwiXHJcblxyXG4gICAgICAgIEBjYW52YXMuZmlsbFRleHQoY2hhciwgQHJlbmRlclgsIEBmb250U2l6ZSlcclxuICAgICAgICBAZm9udEF0bGFzLnRleHR1cmVzLnB1c2hcclxuICAgICAgICAgICAgbmFtZTogY2hhclxyXG4gICAgICAgICAgICBjbGlwWDogQHJlbmRlclhcclxuICAgICAgICAgICAgY2xpcFk6IEByZW5kZXJZXHJcblxyXG4gICAgICAgIEByZW5kZXJYICs9IEBjYW52YXMubWVhc3VyZVRleHQoY2hhcikud2lkdGhcclxuXHJcbiAgICBDbGlwRm9udEltYWdlOiAtPlxyXG4gICAgICAgIGNsaXBIZWlnaHQgPSBAZm9udFNpemUgKiAxLjVcclxuXHJcbiAgICAgICAgaW1hZ2VEYXRhID0gQGNhbnZhcy5nZXRJbWFnZURhdGEoMCwgMCwgQHJlbmRlclgsIGNsaXBIZWlnaHQpXHJcblxyXG4gICAgICAgIG5ld0NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJDQU5WQVNcIilcclxuICAgICAgICBuZXdDYW52YXMud2lkdGggPSBAcmVuZGVyWFxyXG4gICAgICAgIG5ld0NhbnZhcy5oZWlnaHQgPSBjbGlwSGVpZ2h0XHJcbiAgICAgICAgbmV3Q2FudmFzLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGdyZWVuXCJcclxuXHJcbiAgICAgICAgJChcIiNyZW5kZXJlZC1mb250XCIpLmFwcGVuZChuZXdDYW52YXMpXHJcblxyXG4gICAgICAgIGNhbnZhcyA9IG5ld0NhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcclxuXHJcbiAgICAgICAgY2FudmFzLnB1dEltYWdlRGF0YShpbWFnZURhdGEsMCwwKVxyXG5cclxuICAgICAgICBAcmVuZGVyZWRGb250ID0gbmV3Q2FudmFzXHJcblxyXG4gICAgQmluZFVJRXZlbnRzOiAtPlxyXG4gICAgICAgIGZvbnROYW1lID0gJChcIiNmb250LW5hbWVcIilcclxuICAgICAgICBzYXZlRm9udCA9ICQoXCIjc2F2ZS1mb250XCIpXHJcblxyXG4gICAgICAgIGZvbnROYW1lLmNoYW5nZSA9PlxyXG4gICAgICAgICAgICBAZm9udCA9IGZvbnROYW1lLnZhbCgpXHJcbiAgICAgICAgICAgIEBSZW5kZXJGb250KClcclxuXHJcbiAgICAgICAgc2F2ZUZvbnQuY2xpY2sgPT5cclxuICAgICAgICAgICAgQFNhdmVGaWxlKClcclxuXHJcbiAgICBTYXZlRmlsZTogLT5cclxuICAgICAgICBkaWFsb2cuc2hvd1NhdmVEaWFsb2cgKGZpbGVOYW1lKSA9PlxyXG4gICAgICAgICAgICBpZiBub3QgZmlsZU5hbWU/XHJcbiAgICAgICAgICAgICAgICBhbGVydChcIm5vIGZpbGUgc2VsZWN0ZWRcIilcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgYnVmZmVyID0gY2FudmFzQnVmZmVyKEByZW5kZXJlZEZvbnQsIFwiaW1hZ2UvcG5nXCIpXHJcblxyXG4gICAgICAgICAgICAgICAgIyB3cml0ZSB0aGUgZm9udCBpbWFnZVxyXG4gICAgICAgICAgICAgICAgZnMud3JpdGVGaWxlIGZpbGVOYW1lLCBidWZmZXIsIChlcnIpIC0+XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgZXJyP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkFuIGVycm9yIG9jY3VyZWQhICN7ZXJyLm1lc3NhZ2V9XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkZpbGUgU2F2ZWRcIilcclxuXHJcbiAgICAgICAgICAgICAgICAjIHdyaXRlIHRoZSB0ZXh0dXJlIGF0bGFzIEpTT05cclxuICAgICAgICAgICAgICAgIGZzLndyaXRlRmlsZSBmaWxlTmFtZSArIFwiLmpzb25cIiwgSlNPTi5zdHJpbmdpZnkoQGZvbnRBdGxhcywgbnVsbCwgNCksIChlcnIpIC0+XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgZXJyP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkFuIGVycm9yIG9jY3VyZWQhICN7ZXJyLm1lc3NhZ2V9XCIpXHJcblxyXG4gICAgT3BlbkZvbnQ6IC0+XHJcbiAgICAgICAgZGlhbG9nLnNob3dPcGVuRGlhbG9nIChmaWxlTmFtZXMpID0+XHJcbiAgICAgICAgICAgIGlmIGZpbGVOYW1lcz9cclxuICAgICAgICAgICAgICAgICMgZG8gc3R1ZmYgd2l0aCBpdFxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBhbGVydChcIk5vIEZpbGUgc2VsZWN0ZWRcIilcclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5IC0+XHJcbiAgICBwbmdGb250ID0gZXhwb3J0cy5wbmdGb250ID0gbmV3IFBuZ0ZvbnQoKVxyXG4gICAgcG5nRm9udC5SZW5kZXJGb250KClcclxuIl19
//# sourceURL=C:\dev\js\pngFont\Src\pngFont.coffee