// Generated by CoffeeScript 1.12.1
(function() {
  var CHARS, PngFont, app, canvasBuffer, dialog, exports, fs;

  app = require('electron').remote;

  fs = require('fs');

  canvasBuffer = require('electron-canvas-to-buffer');

  dialog = app.dialog;

  exports = this;

  CHARS = "abcdefghijklmnopqrstuvwxyz";

  CHARS += CHARS.toUpperCase();

  CHARS += ".,<>/?";

  PngFont = (function() {
    var renderedFont;

    PngFont.prototype.renderX = 0;

    PngFont.prototype.fontSize = 18;

    PngFont.prototype.font = "monospace";

    PngFont.prototype.fontColor = "black";

    renderedFont = null;

    function PngFont() {
      this.canvasNode = document.createElement("CANVAS");
      this.canvasNode.width = $("#main").width();
      this.canvasNode.height = 300;
      this.canvasNode.style.border = "1px solid";
      $("#canvas-place").append(this.canvasNode);
      this.canvas = this.canvasNode.getContext("2d");
      this.BindUIEvents();
    }

    PngFont.prototype.RenderFont = function() {
      var char, chars, i, index, len;
      if (this.renderedFont != null) {
        $(this.renderedFont).remove();
        this.renderedFont = null;
      }
      this.canvas.clearRect(0, 0, this.renderX, 400);
      this.renderX = 0;
      chars = CHARS.split("");
      for (index = i = 0, len = chars.length; i < len; index = ++i) {
        char = chars[index];
        this.RenderCharacter(char);
      }
      return this.ClipFontImage();
    };

    PngFont.prototype.RenderCharacter = function(char) {
      this.canvas.fillStyle = this.fontColor;
      this.canvas.font = this.fontSize + "px " + this.font;
      this.canvas.fillText(char, this.renderX, this.fontSize);
      return this.renderX += this.canvas.measureText(char).width;
    };

    PngFont.prototype.ClipFontImage = function() {
      var canvas, clipHeight, imageData, newCanvas;
      clipHeight = this.fontSize * 1.5;
      imageData = this.canvas.getImageData(0, 0, this.renderX, clipHeight);
      newCanvas = document.createElement("CANVAS");
      newCanvas.width = this.renderX;
      newCanvas.height = clipHeight;
      newCanvas.style.border = "1px solid green";
      $("#rendered-font").append(newCanvas);
      canvas = newCanvas.getContext("2d");
      canvas.putImageData(imageData, 0, 0);
      return this.renderedFont = newCanvas;
    };

    PngFont.prototype.BindUIEvents = function() {
      var fontName, saveFont;
      fontName = $("#font-name");
      saveFont = $("#save-font");
      fontName.change((function(_this) {
        return function() {
          _this.font = fontName.val();
          return _this.RenderFont();
        };
      })(this));
      return saveFont.click((function(_this) {
        return function() {
          return _this.SaveFile();
        };
      })(this));
    };

    PngFont.prototype.SaveFile = function() {
      return dialog.showSaveDialog((function(_this) {
        return function(fileName) {
          var buffer;
          if (fileName == null) {
            return alert("no file selected");
          } else {
            console.log(_this.renderedFont);
            buffer = canvasBuffer(_this.renderedFont, "image/png");
            return fs.writeFile(fileName, buffer, function(err) {
              if (err != null) {
                return alert("An error occured! " + err.message);
              } else {
                return alert("File Saved");
              }
            });
          }
        };
      })(this));
    };

    return PngFont;

  })();

  $(document).ready(function() {
    var pngFont;
    pngFont = exports.pngFont = new PngFont();
    return pngFont.RenderFont();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG5nRm9udC5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiU3JjXFxwbmdGb250LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQSxNQUFBOztFQUFBLEdBQUEsR0FBTSxPQUFBLENBQVEsVUFBUixDQUFtQixDQUFDOztFQUMxQixFQUFBLEdBQUssT0FBQSxDQUFRLElBQVI7O0VBQ0wsWUFBQSxHQUFlLE9BQUEsQ0FBUSwyQkFBUjs7RUFDZixNQUFBLEdBQVMsR0FBRyxDQUFDOztFQUViLE9BQUEsR0FBVTs7RUFFVixLQUFBLEdBQVE7O0VBQ1IsS0FBQSxJQUFTLEtBQUssQ0FBQyxXQUFOLENBQUE7O0VBQ1QsS0FBQSxJQUFTOztFQUVIO0FBQ0YsUUFBQTs7c0JBQUEsT0FBQSxHQUFTOztzQkFDVCxRQUFBLEdBQVU7O3NCQUNWLElBQUEsR0FBTTs7c0JBQ04sU0FBQSxHQUFXOztJQUNYLFlBQUEsR0FBZTs7SUFFRixpQkFBQTtNQUNULElBQUMsQ0FBQSxVQUFELEdBQWMsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsUUFBdkI7TUFDZCxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQVosR0FBb0IsQ0FBQSxDQUFFLE9BQUYsQ0FBVSxDQUFDLEtBQVgsQ0FBQTtNQUNwQixJQUFDLENBQUEsVUFBVSxDQUFDLE1BQVosR0FBcUI7TUFDckIsSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBbEIsR0FBMkI7TUFFM0IsQ0FBQSxDQUFFLGVBQUYsQ0FBa0IsQ0FBQyxNQUFuQixDQUEwQixJQUFDLENBQUEsVUFBM0I7TUFFQSxJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxVQUFVLENBQUMsVUFBWixDQUF1QixJQUF2QjtNQUVWLElBQUMsQ0FBQSxZQUFELENBQUE7SUFWUzs7c0JBWWIsVUFBQSxHQUFZLFNBQUE7QUFDUixVQUFBO01BQUEsSUFBRyx5QkFBSDtRQUNJLENBQUEsQ0FBRSxJQUFDLENBQUEsWUFBSCxDQUFnQixDQUFD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LENBQUMsT0FBL0IsRUFESjtlQUFBLE1BQUE7dUJBR0ksS0FBQSxDQUFNLFlBQU4sRUFISjs7WUFEMkIsQ0FBL0IsRUFMSjs7UUFEa0I7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXRCO0lBRE07Ozs7OztFQWFkLENBQUEsQ0FBRSxRQUFGLENBQVcsQ0FBQyxLQUFaLENBQWtCLFNBQUE7QUFDZCxRQUFBO0lBQUEsT0FBQSxHQUFVLE9BQU8sQ0FBQyxPQUFSLEdBQXNCLElBQUEsT0FBQSxDQUFBO1dBQ2hDLE9BQU8sQ0FBQyxVQUFSLENBQUE7RUFGYyxDQUFsQjtBQWhHQSIsInNvdXJjZXNDb250ZW50IjpbImFwcCA9IHJlcXVpcmUoJ2VsZWN0cm9uJykucmVtb3RlXHJcbmZzID0gcmVxdWlyZSgnZnMnKVxyXG5jYW52YXNCdWZmZXIgPSByZXF1aXJlKCdlbGVjdHJvbi1jYW52YXMtdG8tYnVmZmVyJylcclxuZGlhbG9nID0gYXBwLmRpYWxvZ1xyXG5cclxuZXhwb3J0cyA9IHRoaXNcclxuXHJcbkNIQVJTID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiXHJcbkNIQVJTICs9IENIQVJTLnRvVXBwZXJDYXNlKClcclxuQ0hBUlMgKz0gXCIuLDw+Lz9cIlxyXG5cclxuY2xhc3MgUG5nRm9udFxyXG4gICAgcmVuZGVyWDogMFxyXG4gICAgZm9udFNpemU6IDE4XHJcbiAgICBmb250OiBcIm1vbm9zcGFjZVwiXHJcbiAgICBmb250Q29sb3I6IFwiYmxhY2tcIlxyXG4gICAgcmVuZGVyZWRGb250ID0gbnVsbFxyXG5cclxuICAgIGNvbnN0cnVjdG9yOiAtPlxyXG4gICAgICAgIEBjYW52YXNOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkNBTlZBU1wiKVxyXG4gICAgICAgIEBjYW52YXNOb2RlLndpZHRoID0gJChcIiNtYWluXCIpLndpZHRoKClcclxuICAgICAgICBAY2FudmFzTm9kZS5oZWlnaHQgPSAzMDBcclxuICAgICAgICBAY2FudmFzTm9kZS5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZFwiXHJcblxyXG4gICAgICAgICQoXCIjY2FudmFzLXBsYWNlXCIpLmFwcGVuZChAY2FudmFzTm9kZSlcclxuXHJcbiAgICAgICAgQGNhbnZhcyA9IEBjYW52YXNOb2RlLmdldENvbnRleHQoXCIyZFwiKVxyXG5cclxuICAgICAgICBAQmluZFVJRXZlbnRzKClcclxuXHJcbiAgICBSZW5kZXJGb250OiAtPlxyXG4gICAgICAgIGlmIEByZW5kZXJlZEZvbnQ/XHJcbiAgICAgICAgICAgICQoQHJlbmRlcmVkRm9udCkucmVtb3ZlKClcclxuICAgICAgICAgICAgQHJlbmRlcmVkRm9udCA9IG51bGxcclxuXHJcbiAgICAgICAgQGNhbnZhcy5jbGVhclJlY3QoMCwgMCwgQHJlbmRlclgsIDQwMClcclxuICAgICAgICBAcmVuZGVyWCA9IDBcclxuXHJcblxyXG4gICAgICAgIGNoYXJzID0gQ0hBUlMuc3BsaXQoXCJcIilcclxuXHJcbiAgICAgICAgZm9yIGNoYXIsaW5kZXggaW4gY2hhcnNcclxuICAgICAgICAgICAgQFJlbmRlckNoYXJhY3RlcihjaGFyKVxyXG5cclxuICAgICAgICBAQ2xpcEZvbnRJbWFnZSgpXHJcblxyXG4gICAgUmVuZGVyQ2hhcmFjdGVyOiAoY2hhcikgLT5cclxuICAgICAgICBAY2FudmFzLmZpbGxTdHlsZSA9IEBmb250Q29sb3JcclxuICAgICAgICBAY2FudmFzLmZvbnQgPSBcIiN7QGZvbnRTaXplfXB4ICN7QGZvbnR9XCJcclxuXHJcbiAgICAgICAgQGNhbnZhcy5maWxsVGV4dChjaGFyLCBAcmVuZGVyWCwgQGZvbnRTaXplKVxyXG5cclxuICAgICAgICBAcmVuZGVyWCArPSBAY2FudmFzLm1lYXN1cmVUZXh0KGNoYXIpLndpZHRoXHJcblxyXG4gICAgQ2xpcEZvbnRJbWFnZTogLT5cclxuICAgICAgICBjbGlwSGVpZ2h0ID0gQGZvbnRTaXplICogMS41XHJcblxyXG4gICAgICAgIGltYWdlRGF0YSA9IEBjYW52YXMuZ2V0SW1hZ2VEYXRhKDAsIDAsIEByZW5kZXJYLCBjbGlwSGVpZ2h0KVxyXG5cclxuICAgICAgICBuZXdDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiQ0FOVkFTXCIpXHJcbiAgICAgICAgbmV3Q2FudmFzLndpZHRoID0gQHJlbmRlclhcclxuICAgICAgICBuZXdDYW52YXMuaGVpZ2h0ID0gY2xpcEhlaWdodFxyXG4gICAgICAgIG5ld0NhbnZhcy5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBncmVlblwiXHJcblxyXG4gICAgICAgICQoXCIjcmVuZGVyZWQtZm9udFwiKS5hcHBlbmQobmV3Q2FudmFzKVxyXG5cclxuICAgICAgICBjYW52YXMgPSBuZXdDYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpXHJcblxyXG4gICAgICAgIGNhbnZhcy5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLDAsMClcclxuXHJcbiAgICAgICAgQHJlbmRlcmVkRm9udCA9IG5ld0NhbnZhc1xyXG5cclxuICAgIEJpbmRVSUV2ZW50czogLT5cclxuICAgICAgICBmb250TmFtZSA9ICQoXCIjZm9udC1uYW1lXCIpXHJcbiAgICAgICAgc2F2ZUZvbnQgPSAkKFwiI3NhdmUtZm9udFwiKVxyXG5cclxuICAgICAgICBmb250TmFtZS5jaGFuZ2UgPT5cclxuICAgICAgICAgICAgQGZvbnQgPSBmb250TmFtZS52YWwoKVxyXG4gICAgICAgICAgICBAUmVuZGVyRm9udCgpXHJcblxyXG4gICAgICAgIHNhdmVGb250LmNsaWNrID0+XHJcbiAgICAgICAgICAgIEBTYXZlRmlsZSgpXHJcblxyXG4gICAgU2F2ZUZpbGU6IC0+XHJcbiAgICAgICAgZGlhbG9nLnNob3dTYXZlRGlhbG9nIChmaWxlTmFtZSkgPT5cclxuICAgICAgICAgICAgaWYgbm90IGZpbGVOYW1lP1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJubyBmaWxlIHNlbGVjdGVkXCIpXHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEByZW5kZXJlZEZvbnQpXHJcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBjYW52YXNCdWZmZXIoQHJlbmRlcmVkRm9udCwgXCJpbWFnZS9wbmdcIilcclxuICAgICAgICAgICAgICAgIGZzLndyaXRlRmlsZSBmaWxlTmFtZSwgYnVmZmVyLCAoZXJyKSAtPlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIGVycj9cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJBbiBlcnJvciBvY2N1cmVkISAje2Vyci5tZXNzYWdlfVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJGaWxlIFNhdmVkXCIpXHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeSAtPlxyXG4gICAgcG5nRm9udCA9IGV4cG9ydHMucG5nRm9udCA9IG5ldyBQbmdGb250KClcclxuICAgIHBuZ0ZvbnQuUmVuZGVyRm9udCgpXHJcbiJdfQ==
//# sourceURL=C:\dev\js\pngFont\Src\pngFont.coffee